// Lembrar de trocar os tokens dos sÃ­mbolos " / : ,

Gramatica = (NaoTerminais, Terminais, Producoes, Inicial), aonde:

NaoTerminais = {S, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, T, U, V, W, X, Y},
Terminais = {algortimo, ", inicio, fimalgoritmo, id, vazio, /, inteiro, logico, :, atribuicao, ,, arit-op, string, parent-abre,
	parent-fecha, comparador, logic-op, se, entao, senao, fimse, num, verdadeiro, falso, enquanto, faca, fimenquanto, escreva,
	para, de, ate, fimpara, passo, leia, fim},
Producoes = {
	S -> algoritmo " A " B inicio G fim fimalgoritmo
	A -> id
	B -> C B | F B | vazio
	C -> D : E
	D -> id X
	E -> inteiro | logico
	F -> // string
	G -> H G | N G | Q G | R G | F G | U G | W G | vazio
	H -> id atribuicao Y
	I -> J | L
	J -> K arit-op K
	K -> id | parent-abre J parent-fecha | J
	L -> M comparador M | L logic-op L
	M -> id | parent-abre L parent-fecha | L
	N -> se L entao G O fimse
	O -> senao G | vazio
	P -> verdadeiro | falso
	Q -> enquanto L faca G fimenquanto
	R -> escreva parent-abre T parent-fecha
	T -> J T | L T | J | L
	U -> para id de num ate num V faca G fimpara
	V -> passo num | vazio
	W -> leia parent-abre D parent-fecha
	X -> , D | vazio
	Y -> id | num | I | P
},
Inicial = S
